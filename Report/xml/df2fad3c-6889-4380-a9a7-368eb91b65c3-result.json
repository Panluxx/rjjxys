{"name": "test_teacher_book", "status": "failed", "statusDetails": {"message": "AssertionError: Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\teacher_book\\打开页面.png) does not exist in screen, message:", "trace": "v = Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\teacher_book\\打开页面.png), msg = ''\n\n    @logwrap\n    def assert_exists(v, msg=\"\"):\n        \"\"\"\n        Assert target exists on device screen\n    \n        :param v: target to be checked\n        :param msg: short description of assertion, it will be recorded in the report\n        :raise AssertionError: if assertion fails\n        :return: coordinates of the target\n        :platforms: Android, Windows, iOS\n        :Example:\n    \n            >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n    \n        \"\"\"\n        try:\n>           pos = loop_find(v, timeout=ST.FIND_TIMEOUT, threshold=ST.THRESHOLD_STRICT or v.threshold)\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\assertions.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\teacher_book\\打开页面.png),)\nkwargs = {'threshold': 0.9, 'timeout': 20}\ntry_log_screen = <function try_log_screen at 0x0000025BA223F1F0>, depth = None\nstart = 1741912446.217107\nm = {'interval': 0.5, 'intervalfunc': None, 'query': Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\teacher_book\\打开页面.png), 'threshold': 0.9, ...}\nsnapshot = False\nfndata = {'call_args': {'interval': 0.5, 'intervalfunc': None, 'query': Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\teacher_book\\打开页面.png), 'threshold': 0.9, ...}, 'end_time': 1741912467.0051036, 'name': 'loop_find', 'start_time': 1741912446.217107, ...}\ndata = {'end_time': 1741912467.0051036, 'traceback': 'Traceback (most recent call last):\\n  File \"E:\\\\Git\\\\rjjxy\\\\venv\\\\lib\\\\...ror: \\'Picture Template(E:\\\\\\\\Git\\\\\\\\rjjxys\\\\\\\\Picture\\\\\\\\lis_7s\\\\\\\\teacher_book\\\\\\\\打开页面.png) not found in screen\\'\\n'}\n\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        \"\"\"\n        The decorator @logwrap can record the function call information in the airtest log and display it in the report.\n        装饰器@logwrap，能够在airtest的log中记录函数的调用信息，显示在报告中\n    \n        The following parameters can be appended to the function parameter definition for additional effect:\n        在函数参数定义中可以附加以下参数，以获得更多效果：\n    \n        snapshot: snapshot: If True, a snapshot can be attached to the report. 如果为True，可以附加一张截图到报告中\n        depth: the depth order of the current log in the log. 指定log中当前log的深度顺序\n    \n        Examples:\n    \n            @logwrap\n            def func1():\n                pass\n    \n            @logwrap\n            def func1(snapshot=True):\n                pass\n    \n        Args:\n            *args:\n            **kwargs:\n    \n        Returns:\n    \n    \n        \"\"\"\n        from airtest.core.cv import try_log_screen\n        # py3 only: def wrapper(*args, depth=None, **kwargs):\n        depth = kwargs.pop('depth', None)  # For compatibility with py2\n        start = time.time()\n        m = inspect.getcallargs(f, *args, **kwargs)\n        # The snapshot parameter is popped from the function parameter,\n        # so the function cannot use the parameter name snapshot later\n        snapshot = m.pop('snapshot', False)\n        fndata = {'name': f.__name__, 'call_args': m, 'start_time': start}\n        logger.running_stack.append(fndata)\n        try:\n>           res = f(*args, **kwargs)\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nquery = Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\teacher_book\\打开页面.png)\ntimeout = 20, threshold = 0.9, interval = 0.5, intervalfunc = None\n\n    @logwrap\n    def loop_find(query, timeout=ST.FIND_TIMEOUT, threshold=None, interval=0.5, intervalfunc=None):\n        \"\"\"\n        Search for image template in the screen until timeout\n    \n        Args:\n            query: image template to be found in screenshot\n            timeout: time interval how long to look for the image template\n            threshold: default is None\n            interval: sleep interval before next attempt to find the image template\n            intervalfunc: function that is executed after unsuccessful attempt to find the image template\n    \n        Raises:\n            TargetNotFoundError: when image template is not found in screenshot\n    \n        Returns:\n            TargetNotFoundError if image template not found, otherwise returns the position where the image template has\n            been found in screenshot\n    \n        \"\"\"\n        G.LOGGING.info(\"Try finding: %s\", query)\n        start_time = time.time()\n        while True:\n            screen = G.DEVICE.snapshot(filename=None, quality=ST.SNAPSHOT_QUALITY)\n    \n            if screen is None:\n                G.LOGGING.warning(\"Screen is None, may be locked\")\n            else:\n                if threshold:\n                    query.threshold = threshold\n                match_pos = query.match_in(screen)\n                if match_pos:\n                    try_log_screen(screen)\n                    return match_pos\n    \n            if intervalfunc is not None:\n                intervalfunc()\n    \n            # 超时则raise，未超时则进行下次循环:\n            if (time.time() - start_time) > timeout:\n                try_log_screen(screen)\n>               raise TargetNotFoundError('Picture %s not found in screen' % query)\nE               airtest.core.error.TargetNotFoundError: 'Picture Template(E:\\\\Git\\\\rjjxys\\\\Picture\\\\lis_7s\\\\teacher_book\\\\打开页面.png) not found in screen'\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\cv.py:80: TargetNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_lis_7s.test_05_teacher_book.TestTeacherBook object at 0x0000025BA3554B50>\nlogin = None\n\n    def test_teacher_book(self, login):\n        self.touch(get_path('学科筛选框'), img_doc='点击学科筛选框')\n        self.touch(get_path('历史'), img_doc='选择历史学科')\n        self.touch(get_path('书本封面'), img_doc='点击书本封面')\n        sleep(2)\n        self.touch(get_path('电子教材'), img_doc='点击电子教材')\n>       self.assert_exists(get_path('打开页面'), img_doc='检查是否打开')\n\nTestCases\\test_lis_7s\\test_05_teacher_book.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\basepage.py:84: in assert_exists\n    raise e\nCommon\\basepage.py:76: in assert_exists\n    assert_exists(self.template(filepath, threshold=threshold, record_pos=record_pos, resolution=resolution,\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: in wrapper\n    res = f(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nv = Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\teacher_book\\打开页面.png), msg = ''\n\n    @logwrap\n    def assert_exists(v, msg=\"\"):\n        \"\"\"\n        Assert target exists on device screen\n    \n        :param v: target to be checked\n        :param msg: short description of assertion, it will be recorded in the report\n        :raise AssertionError: if assertion fails\n        :return: coordinates of the target\n        :platforms: Android, Windows, iOS\n        :Example:\n    \n            >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n    \n        \"\"\"\n        try:\n            pos = loop_find(v, timeout=ST.FIND_TIMEOUT, threshold=ST.THRESHOLD_STRICT or v.threshold)\n            return pos\n        except TargetNotFoundError:\n>           raise AssertionError(\"%s does not exist in screen, message: %s\" % (v, msg))\nE           AssertionError: Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\teacher_book\\打开页面.png) does not exist in screen, message:\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\assertions.py:30: AssertionError"}, "attachments": [{"name": "检查是否打开", "source": "11586891-9256-4a6b-ba5d-cb35aa1db600-attachment.png", "type": "image/png"}, {"name": "log", "source": "e41322ad-4da3-4a84-b386-ade204583ada-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "13a973c4-7bca-4b02-b836-50659eec1756-attachment.txt", "type": "text/plain"}], "start": 1741912433480, "stop": 1741912467167, "uuid": "ec083755-db9f-4b63-baf9-3369fa0f6b3c", "historyId": "ef4845c89bd682d132897cc54e52199c", "testCaseId": "ef4845c89bd682d132897cc54e52199c", "fullName": "TestCases.test_lis_7s.test_05_teacher_book.TestTeacherBook#test_teacher_book", "labels": [{"name": "parentSuite", "value": "TestCases.test_lis_7s"}, {"name": "suite", "value": "test_05_teacher_book"}, {"name": "subSuite", "value": "TestTeacherBook"}, {"name": "host", "value": "gtx650-ani"}, {"name": "thread", "value": "972-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_lis_7s.test_05_teacher_book"}]}