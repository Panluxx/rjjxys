{
  "uid" : "7f419f1d87efb5b6",
  "name" : "test_import_resources[test_data4]",
  "fullName" : "TestCases.test_my_resources.test_resources.TestResources#test_import_resources",
  "historyId" : "8d786357a63ca638d1806cb0958e8d92",
  "time" : {
    "start" : 1742288100438,
    "stop" : 1742288141534,
    "duration" : 41096
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png) does not exist in screen, message:",
  "statusTrace" : "v = Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png), msg = ''\n\n    @logwrap\n    def assert_exists(v, msg=\"\"):\n        \"\"\"\n        Assert target exists on device screen\n    \n        :param v: target to be checked\n        :param msg: short description of assertion, it will be recorded in the report\n        :raise AssertionError: if assertion fails\n        :return: coordinates of the target\n        :platforms: Android, Windows, iOS\n        :Example:\n    \n            >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n    \n        \"\"\"\n        try:\n>           pos = loop_find(v, timeout=ST.FIND_TIMEOUT, threshold=ST.THRESHOLD_STRICT or v.threshold)\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\assertions.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png),)\nkwargs = {'threshold': 0.9, 'timeout': 20}\ntry_log_screen = <function try_log_screen at 0x00000208F44EF1F0>, depth = None\nstart = 1742288113.824785\nm = {'interval': 0.5, 'intervalfunc': None, 'query': Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png), 'threshold': 0.9, ...}\nsnapshot = False\nfndata = {'call_args': {'interval': 0.5, 'intervalfunc': None, 'query': Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png), 'threshold': 0.9, ...}, 'end_time': 1742288140.14233, 'name': 'loop_find', 'start_time': 1742288113.824785, ...}\ndata = {'end_time': 1742288140.14233, 'traceback': 'Traceback (most recent call last):\\n  File \"E:\\\\Git\\\\rjjxy\\\\venv\\\\lib\\\\si...: \\'Picture Template(E:\\\\\\\\Git\\\\\\\\rjjxys\\\\\\\\Picture\\\\\\\\my_resources\\\\\\\\resources\\\\\\\\图片资源.png) not found in screen\\'\\n'}\n\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        \"\"\"\n        The decorator @logwrap can record the function call information in the airtest log and display it in the report.\n        装饰器@logwrap，能够在airtest的log中记录函数的调用信息，显示在报告中\n    \n        The following parameters can be appended to the function parameter definition for additional effect:\n        在函数参数定义中可以附加以下参数，以获得更多效果：\n    \n        snapshot: snapshot: If True, a snapshot can be attached to the report. 如果为True，可以附加一张截图到报告中\n        depth: the depth order of the current log in the log. 指定log中当前log的深度顺序\n    \n        Examples:\n    \n            @logwrap\n            def func1():\n                pass\n    \n            @logwrap\n            def func1(snapshot=True):\n                pass\n    \n        Args:\n            *args:\n            **kwargs:\n    \n        Returns:\n    \n    \n        \"\"\"\n        from airtest.core.cv import try_log_screen\n        # py3 only: def wrapper(*args, depth=None, **kwargs):\n        depth = kwargs.pop('depth', None)  # For compatibility with py2\n        start = time.time()\n        m = inspect.getcallargs(f, *args, **kwargs)\n        # The snapshot parameter is popped from the function parameter,\n        # so the function cannot use the parameter name snapshot later\n        snapshot = m.pop('snapshot', False)\n        fndata = {'name': f.__name__, 'call_args': m, 'start_time': start}\n        logger.running_stack.append(fndata)\n        try:\n>           res = f(*args, **kwargs)\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nquery = Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png)\ntimeout = 20, threshold = 0.9, interval = 0.5, intervalfunc = None\n\n    @logwrap\n    def loop_find(query, timeout=ST.FIND_TIMEOUT, threshold=None, interval=0.5, intervalfunc=None):\n        \"\"\"\n        Search for image template in the screen until timeout\n    \n        Args:\n            query: image template to be found in screenshot\n            timeout: time interval how long to look for the image template\n            threshold: default is None\n            interval: sleep interval before next attempt to find the image template\n            intervalfunc: function that is executed after unsuccessful attempt to find the image template\n    \n        Raises:\n            TargetNotFoundError: when image template is not found in screenshot\n    \n        Returns:\n            TargetNotFoundError if image template not found, otherwise returns the position where the image template has\n            been found in screenshot\n    \n        \"\"\"\n        G.LOGGING.info(\"Try finding: %s\", query)\n        start_time = time.time()\n        while True:\n            screen = G.DEVICE.snapshot(filename=None, quality=ST.SNAPSHOT_QUALITY)\n    \n            if screen is None:\n                G.LOGGING.warning(\"Screen is None, may be locked\")\n            else:\n                if threshold:\n                    query.threshold = threshold\n                match_pos = query.match_in(screen)\n                if match_pos:\n                    try_log_screen(screen)\n                    return match_pos\n    \n            if intervalfunc is not None:\n                intervalfunc()\n    \n            # 超时则raise，未超时则进行下次循环:\n            if (time.time() - start_time) > timeout:\n                try_log_screen(screen)\n>               raise TargetNotFoundError('Picture %s not found in screen' % query)\nE               airtest.core.error.TargetNotFoundError: 'Picture Template(E:\\\\Git\\\\rjjxys\\\\Picture\\\\my_resources\\\\resources\\\\图片资源.png) not found in screen'\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\cv.py:80: TargetNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_my_resources.test_resources.TestResources object at 0x00000208F5912CD0>\nlogin = None, test_data = {'name': '图片.jpg'}\n\n    @pytest.mark.parametrize(\"test_data\", resource_name)\n    def test_import_resources(self, login, test_data):\n        self.touch(get_path('我的资源'), img_doc='切换到我的资源页面')\n        self.touch(get_path('导入'), img_doc='点击导入按钮')\n        if self.exists(get_path('路径存在')):\n            pass\n        else:\n            self.touch(get_path('下拉框'), img_doc='点击下拉框')\n            # 文件路径\n            self.text(p_path.resources_path, img_doc=f'输入文件路径')\n            self.click_key('{ENTER}')\n        sleep(1)\n        self.touch(get_path('输入文件名'), img_doc='点击输入文件名')\n        self.text(test_data['name'], img_doc=f'输入文件名{test_data[\"name\"]}')\n        self.click_key('{ENTER}')\n        sleep(3)\n        if test_data['name'] == '音频.mp3':\n            self.assert_exists(get_path('音频'), img_doc='查看音频封面')\n            self.touch(get_path('音频'), img_doc='打开资源')\n            self.assert_exists(get_path('音频资源'), img_doc='查看打开的资源')\n            self.touch(get_path('关闭音频'), img_doc='点击关闭音频')\n        elif test_data['name'] == '视频.mp4':\n            self.assert_exists(get_path('视频'), img_doc='查看视频封面')\n            self.touch(get_path('视频'), img_doc='打开视频')\n            self.assert_exists(get_path('视频资源'), img_doc='查看打开的资源')\n            self.click_key('{ESC}')\n            self.touch(get_path('关闭音频'), img_doc='关闭视频')\n        elif test_data['name'] == '图片.jpg':\n            self.assert_exists(get_path('图片'), img_doc='查看图片封面')\n            self.touch(get_path('图片'), threshold=0.95, img_doc='打开图片')\n>           self.assert_exists(get_path('图片资源'), img_doc='查看打开的资源')\n\nTestCases\\test_my_resources\\test_resources.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\basepage.py:84: in assert_exists\n    raise e\nCommon\\basepage.py:76: in assert_exists\n    assert_exists(self.template(filepath, threshold=threshold, record_pos=record_pos, resolution=resolution,\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: in wrapper\n    res = f(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nv = Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png), msg = ''\n\n    @logwrap\n    def assert_exists(v, msg=\"\"):\n        \"\"\"\n        Assert target exists on device screen\n    \n        :param v: target to be checked\n        :param msg: short description of assertion, it will be recorded in the report\n        :raise AssertionError: if assertion fails\n        :return: coordinates of the target\n        :platforms: Android, Windows, iOS\n        :Example:\n    \n            >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n    \n        \"\"\"\n        try:\n            pos = loop_find(v, timeout=ST.FIND_TIMEOUT, threshold=ST.THRESHOLD_STRICT or v.threshold)\n            return pos\n        except TargetNotFoundError:\n>           raise AssertionError(\"%s does not exist in screen, message: %s\" % (v, msg))\nE           AssertionError: Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png) does not exist in screen, message:\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\assertions.py:30: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "open_client",
    "time" : {
      "start" : 1742288087764,
      "stop" : 1742288088524,
      "duration" : 760
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1742288088524,
      "stop" : 1742288100437,
      "duration" : 11913
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png) does not exist in screen, message:",
    "statusTrace" : "v = Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png), msg = ''\n\n    @logwrap\n    def assert_exists(v, msg=\"\"):\n        \"\"\"\n        Assert target exists on device screen\n    \n        :param v: target to be checked\n        :param msg: short description of assertion, it will be recorded in the report\n        :raise AssertionError: if assertion fails\n        :return: coordinates of the target\n        :platforms: Android, Windows, iOS\n        :Example:\n    \n            >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n    \n        \"\"\"\n        try:\n>           pos = loop_find(v, timeout=ST.FIND_TIMEOUT, threshold=ST.THRESHOLD_STRICT or v.threshold)\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\assertions.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png),)\nkwargs = {'threshold': 0.9, 'timeout': 20}\ntry_log_screen = <function try_log_screen at 0x00000208F44EF1F0>, depth = None\nstart = 1742288113.824785\nm = {'interval': 0.5, 'intervalfunc': None, 'query': Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png), 'threshold': 0.9, ...}\nsnapshot = False\nfndata = {'call_args': {'interval': 0.5, 'intervalfunc': None, 'query': Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png), 'threshold': 0.9, ...}, 'end_time': 1742288140.14233, 'name': 'loop_find', 'start_time': 1742288113.824785, ...}\ndata = {'end_time': 1742288140.14233, 'traceback': 'Traceback (most recent call last):\\n  File \"E:\\\\Git\\\\rjjxy\\\\venv\\\\lib\\\\si...: \\'Picture Template(E:\\\\\\\\Git\\\\\\\\rjjxys\\\\\\\\Picture\\\\\\\\my_resources\\\\\\\\resources\\\\\\\\图片资源.png) not found in screen\\'\\n'}\n\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        \"\"\"\n        The decorator @logwrap can record the function call information in the airtest log and display it in the report.\n        装饰器@logwrap，能够在airtest的log中记录函数的调用信息，显示在报告中\n    \n        The following parameters can be appended to the function parameter definition for additional effect:\n        在函数参数定义中可以附加以下参数，以获得更多效果：\n    \n        snapshot: snapshot: If True, a snapshot can be attached to the report. 如果为True，可以附加一张截图到报告中\n        depth: the depth order of the current log in the log. 指定log中当前log的深度顺序\n    \n        Examples:\n    \n            @logwrap\n            def func1():\n                pass\n    \n            @logwrap\n            def func1(snapshot=True):\n                pass\n    \n        Args:\n            *args:\n            **kwargs:\n    \n        Returns:\n    \n    \n        \"\"\"\n        from airtest.core.cv import try_log_screen\n        # py3 only: def wrapper(*args, depth=None, **kwargs):\n        depth = kwargs.pop('depth', None)  # For compatibility with py2\n        start = time.time()\n        m = inspect.getcallargs(f, *args, **kwargs)\n        # The snapshot parameter is popped from the function parameter,\n        # so the function cannot use the parameter name snapshot later\n        snapshot = m.pop('snapshot', False)\n        fndata = {'name': f.__name__, 'call_args': m, 'start_time': start}\n        logger.running_stack.append(fndata)\n        try:\n>           res = f(*args, **kwargs)\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nquery = Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png)\ntimeout = 20, threshold = 0.9, interval = 0.5, intervalfunc = None\n\n    @logwrap\n    def loop_find(query, timeout=ST.FIND_TIMEOUT, threshold=None, interval=0.5, intervalfunc=None):\n        \"\"\"\n        Search for image template in the screen until timeout\n    \n        Args:\n            query: image template to be found in screenshot\n            timeout: time interval how long to look for the image template\n            threshold: default is None\n            interval: sleep interval before next attempt to find the image template\n            intervalfunc: function that is executed after unsuccessful attempt to find the image template\n    \n        Raises:\n            TargetNotFoundError: when image template is not found in screenshot\n    \n        Returns:\n            TargetNotFoundError if image template not found, otherwise returns the position where the image template has\n            been found in screenshot\n    \n        \"\"\"\n        G.LOGGING.info(\"Try finding: %s\", query)\n        start_time = time.time()\n        while True:\n            screen = G.DEVICE.snapshot(filename=None, quality=ST.SNAPSHOT_QUALITY)\n    \n            if screen is None:\n                G.LOGGING.warning(\"Screen is None, may be locked\")\n            else:\n                if threshold:\n                    query.threshold = threshold\n                match_pos = query.match_in(screen)\n                if match_pos:\n                    try_log_screen(screen)\n                    return match_pos\n    \n            if intervalfunc is not None:\n                intervalfunc()\n    \n            # 超时则raise，未超时则进行下次循环:\n            if (time.time() - start_time) > timeout:\n                try_log_screen(screen)\n>               raise TargetNotFoundError('Picture %s not found in screen' % query)\nE               airtest.core.error.TargetNotFoundError: 'Picture Template(E:\\\\Git\\\\rjjxys\\\\Picture\\\\my_resources\\\\resources\\\\图片资源.png) not found in screen'\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\cv.py:80: TargetNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_my_resources.test_resources.TestResources object at 0x00000208F5912CD0>\nlogin = None, test_data = {'name': '图片.jpg'}\n\n    @pytest.mark.parametrize(\"test_data\", resource_name)\n    def test_import_resources(self, login, test_data):\n        self.touch(get_path('我的资源'), img_doc='切换到我的资源页面')\n        self.touch(get_path('导入'), img_doc='点击导入按钮')\n        if self.exists(get_path('路径存在')):\n            pass\n        else:\n            self.touch(get_path('下拉框'), img_doc='点击下拉框')\n            # 文件路径\n            self.text(p_path.resources_path, img_doc=f'输入文件路径')\n            self.click_key('{ENTER}')\n        sleep(1)\n        self.touch(get_path('输入文件名'), img_doc='点击输入文件名')\n        self.text(test_data['name'], img_doc=f'输入文件名{test_data[\"name\"]}')\n        self.click_key('{ENTER}')\n        sleep(3)\n        if test_data['name'] == '音频.mp3':\n            self.assert_exists(get_path('音频'), img_doc='查看音频封面')\n            self.touch(get_path('音频'), img_doc='打开资源')\n            self.assert_exists(get_path('音频资源'), img_doc='查看打开的资源')\n            self.touch(get_path('关闭音频'), img_doc='点击关闭音频')\n        elif test_data['name'] == '视频.mp4':\n            self.assert_exists(get_path('视频'), img_doc='查看视频封面')\n            self.touch(get_path('视频'), img_doc='打开视频')\n            self.assert_exists(get_path('视频资源'), img_doc='查看打开的资源')\n            self.click_key('{ESC}')\n            self.touch(get_path('关闭音频'), img_doc='关闭视频')\n        elif test_data['name'] == '图片.jpg':\n            self.assert_exists(get_path('图片'), img_doc='查看图片封面')\n            self.touch(get_path('图片'), threshold=0.95, img_doc='打开图片')\n>           self.assert_exists(get_path('图片资源'), img_doc='查看打开的资源')\n\nTestCases\\test_my_resources\\test_resources.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\basepage.py:84: in assert_exists\n    raise e\nCommon\\basepage.py:76: in assert_exists\n    assert_exists(self.template(filepath, threshold=threshold, record_pos=record_pos, resolution=resolution,\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: in wrapper\n    res = f(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nv = Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png), msg = ''\n\n    @logwrap\n    def assert_exists(v, msg=\"\"):\n        \"\"\"\n        Assert target exists on device screen\n    \n        :param v: target to be checked\n        :param msg: short description of assertion, it will be recorded in the report\n        :raise AssertionError: if assertion fails\n        :return: coordinates of the target\n        :platforms: Android, Windows, iOS\n        :Example:\n    \n            >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n    \n        \"\"\"\n        try:\n            pos = loop_find(v, timeout=ST.FIND_TIMEOUT, threshold=ST.THRESHOLD_STRICT or v.threshold)\n            return pos\n        except TargetNotFoundError:\n>           raise AssertionError(\"%s does not exist in screen, message: %s\" % (v, msg))\nE           AssertionError: Template(E:\\Git\\rjjxys\\Picture\\my_resources\\resources\\图片资源.png) does not exist in screen, message:\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\assertions.py:30: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3c6e1017227d2e71",
      "name" : "查看打开的资源",
      "source" : "3c6e1017227d2e71.png",
      "type" : "image/png",
      "size" : 435284
    }, {
      "uid" : "60dc6a702cdbe76f",
      "name" : "log",
      "source" : "60dc6a702cdbe76f.txt",
      "type" : "text/plain",
      "size" : 16585
    }, {
      "uid" : "fbaed2afa7d29bdc",
      "name" : "stderr",
      "source" : "fbaed2afa7d29bdc.txt",
      "type" : "text/plain",
      "size" : 15981
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "open_client::0",
    "time" : {
      "start" : 1742288141565,
      "stop" : 1742288143897,
      "duration" : 2332
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('login')"
  }, {
    "name" : "parentSuite",
    "value" : "TestCases.test_my_resources"
  }, {
    "name" : "suite",
    "value" : "test_resources"
  }, {
    "name" : "subSuite",
    "value" : "TestResources"
  }, {
    "name" : "host",
    "value" : "gtx650-ani"
  }, {
    "name" : "thread",
    "value" : "3572-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCases.test_my_resources.test_resources"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "test_data",
    "value" : "{'name': '图片.jpg'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "471f0e633e44b3b8",
      "status" : "failed",
      "statusDetails" : "Failed: ScopeMismatch: You tried to access the function scoped fixture login with a module scoped request object, involved factories:\nTestCases\\test_my_resources\\test_resources.py:27:  def del_resources(login)\nTestCases\\conftest.py:43:  def login(open_client)",
      "time" : {
        "start" : 1741912521707,
        "stop" : 1741912521707,
        "duration" : 0
      }
    }, {
      "uid" : "8acf845ed2606363",
      "status" : "broken",
      "statusDetails" : "airtest.aircv.error.FileNotExistError: File not exist: E:\\Git\\rjjxys\\Picture\\resources\\我的资源.png",
      "time" : {
        "start" : 1741245947816,
        "stop" : 1741245947816,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.usefixtures('login')" ]
  },
  "source" : "7f419f1d87efb5b6.json",
  "parameterValues" : [ "{'name': '图片.jpg'}" ]
}