{
  "uid" : "23b1717713391b07",
  "name" : "test_case_01",
  "fullName" : "TestCases.test_lis_7s.test_01_textbook_explain.TestTextbookExplain#test_case_01",
  "historyId" : "f71763ee2a580ce4711b3103081db652",
  "time" : {
    "start" : 1742287403586,
    "stop" : 1742287481751,
    "duration" : 78165
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png) does not exist in screen, message:",
  "statusTrace" : "v = Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png), msg = ''\n\n    @logwrap\n    def assert_exists(v, msg=\"\"):\n        \"\"\"\n        Assert target exists on device screen\n    \n        :param v: target to be checked\n        :param msg: short description of assertion, it will be recorded in the report\n        :raise AssertionError: if assertion fails\n        :return: coordinates of the target\n        :platforms: Android, Windows, iOS\n        :Example:\n    \n            >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n    \n        \"\"\"\n        try:\n>           pos = loop_find(v, timeout=ST.FIND_TIMEOUT, threshold=ST.THRESHOLD_STRICT or v.threshold)\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\assertions.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png),)\nkwargs = {'threshold': 0.9, 'timeout': 20}\ntry_log_screen = <function try_log_screen at 0x00000208F44EF1F0>, depth = None\nstart = 1742287457.2301557\nm = {'interval': 0.5, 'intervalfunc': None, 'query': Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png), 'threshold': 0.9, ...}\nsnapshot = False\nfndata = {'call_args': {'interval': 0.5, 'intervalfunc': None, 'query': Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\...g), 'threshold': 0.9, ...}, 'end_time': 1742287478.9891448, 'name': 'loop_find', 'start_time': 1742287457.2301557, ...}\ndata = {'end_time': 1742287478.9891448, 'traceback': 'Traceback (most recent call last):\\n  File \"E:\\\\Git\\\\rjjxy\\\\venv\\\\lib\\\\...\\'Picture Template(E:\\\\\\\\Git\\\\\\\\rjjxys\\\\\\\\Picture\\\\\\\\lis_7s\\\\\\\\textbook_explain\\\\\\\\拖动后检查.png) not found in screen\\'\\n'}\n\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        \"\"\"\n        The decorator @logwrap can record the function call information in the airtest log and display it in the report.\n        装饰器@logwrap，能够在airtest的log中记录函数的调用信息，显示在报告中\n    \n        The following parameters can be appended to the function parameter definition for additional effect:\n        在函数参数定义中可以附加以下参数，以获得更多效果：\n    \n        snapshot: snapshot: If True, a snapshot can be attached to the report. 如果为True，可以附加一张截图到报告中\n        depth: the depth order of the current log in the log. 指定log中当前log的深度顺序\n    \n        Examples:\n    \n            @logwrap\n            def func1():\n                pass\n    \n            @logwrap\n            def func1(snapshot=True):\n                pass\n    \n        Args:\n            *args:\n            **kwargs:\n    \n        Returns:\n    \n    \n        \"\"\"\n        from airtest.core.cv import try_log_screen\n        # py3 only: def wrapper(*args, depth=None, **kwargs):\n        depth = kwargs.pop('depth', None)  # For compatibility with py2\n        start = time.time()\n        m = inspect.getcallargs(f, *args, **kwargs)\n        # The snapshot parameter is popped from the function parameter,\n        # so the function cannot use the parameter name snapshot later\n        snapshot = m.pop('snapshot', False)\n        fndata = {'name': f.__name__, 'call_args': m, 'start_time': start}\n        logger.running_stack.append(fndata)\n        try:\n>           res = f(*args, **kwargs)\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nquery = Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png)\ntimeout = 20, threshold = 0.9, interval = 0.5, intervalfunc = None\n\n    @logwrap\n    def loop_find(query, timeout=ST.FIND_TIMEOUT, threshold=None, interval=0.5, intervalfunc=None):\n        \"\"\"\n        Search for image template in the screen until timeout\n    \n        Args:\n            query: image template to be found in screenshot\n            timeout: time interval how long to look for the image template\n            threshold: default is None\n            interval: sleep interval before next attempt to find the image template\n            intervalfunc: function that is executed after unsuccessful attempt to find the image template\n    \n        Raises:\n            TargetNotFoundError: when image template is not found in screenshot\n    \n        Returns:\n            TargetNotFoundError if image template not found, otherwise returns the position where the image template has\n            been found in screenshot\n    \n        \"\"\"\n        G.LOGGING.info(\"Try finding: %s\", query)\n        start_time = time.time()\n        while True:\n            screen = G.DEVICE.snapshot(filename=None, quality=ST.SNAPSHOT_QUALITY)\n    \n            if screen is None:\n                G.LOGGING.warning(\"Screen is None, may be locked\")\n            else:\n                if threshold:\n                    query.threshold = threshold\n                match_pos = query.match_in(screen)\n                if match_pos:\n                    try_log_screen(screen)\n                    return match_pos\n    \n            if intervalfunc is not None:\n                intervalfunc()\n    \n            # 超时则raise，未超时则进行下次循环:\n            if (time.time() - start_time) > timeout:\n                try_log_screen(screen)\n>               raise TargetNotFoundError('Picture %s not found in screen' % query)\nE               airtest.core.error.TargetNotFoundError: 'Picture Template(E:\\\\Git\\\\rjjxys\\\\Picture\\\\lis_7s\\\\textbook_explain\\\\拖动后检查.png) not found in screen'\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\cv.py:80: TargetNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_lis_7s.test_01_textbook_explain.TestTextbookExplain object at 0x00000208F584E8B0>\nlogin = None\n\n    def test_case_01(self, login):\n        self.touch(get_path('学科筛选框'), img_doc='点击学科筛选框')\n        self.touch(get_path('历史'), img_doc='选择历史学科')\n        self.touch(get_path('书本封面'), img_doc='点击书本封面')\n        self.assert_exists(get_path('模块布局'))\n        self.touch(get_path('专题讲座'), img_doc='点击专题讲座')\n        self.assert_exists(get_path('专题讲座布局'))\n        sleep(2)\n        self.touch(get_path('暂停'), img_doc='点击暂停')\n        self.assert_exists(get_path('暂停布局'))\n        self.touch(get_path('播放'), img_doc='点击播放')\n        self.touch(get_path('关闭音量'), img_doc='点击关闭音量')\n        self.touch(get_path('倍速'), img_doc='点击倍速')\n        self.touch(get_path('2.0倍速'), img_doc='点击2.0倍速')\n        self.assert_exists(get_path('检查2.0倍速'))\n        self.touch(get_path('下载'), img_doc='点击下载')\n        self.touch(get_path('确定'), img_doc='点击确定')\n        # 验证下载\n        self.touch(get_path('下载'), img_doc='点击下载')\n        self.assert_exists(get_path('下载中'))\n        self.touch(get_path('恢复音量'), img_doc='点击恢复音量')\n        # 检查拖动\n        self.swipe(get_path('拖动进度'), record_pos=(-0.107, 0.219), vector=[0.0005, -0.0037], img_doc='拖动进度条')\n        sleep(1)\n>       self.assert_exists(get_path('拖动后检查'))\n\nTestCases\\test_lis_7s\\test_01_textbook_explain.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\basepage.py:84: in assert_exists\n    raise e\nCommon\\basepage.py:76: in assert_exists\n    assert_exists(self.template(filepath, threshold=threshold, record_pos=record_pos, resolution=resolution,\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: in wrapper\n    res = f(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nv = Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png), msg = ''\n\n    @logwrap\n    def assert_exists(v, msg=\"\"):\n        \"\"\"\n        Assert target exists on device screen\n    \n        :param v: target to be checked\n        :param msg: short description of assertion, it will be recorded in the report\n        :raise AssertionError: if assertion fails\n        :return: coordinates of the target\n        :platforms: Android, Windows, iOS\n        :Example:\n    \n            >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n    \n        \"\"\"\n        try:\n            pos = loop_find(v, timeout=ST.FIND_TIMEOUT, threshold=ST.THRESHOLD_STRICT or v.threshold)\n            return pos\n        except TargetNotFoundError:\n>           raise AssertionError(\"%s does not exist in screen, message: %s\" % (v, msg))\nE           AssertionError: Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png) does not exist in screen, message:\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\assertions.py:30: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "open_client",
    "time" : {
      "start" : 1742287390092,
      "stop" : 1742287391697,
      "duration" : 1605
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1742287391697,
      "stop" : 1742287403572,
      "duration" : 11875
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png) does not exist in screen, message:",
    "statusTrace" : "v = Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png), msg = ''\n\n    @logwrap\n    def assert_exists(v, msg=\"\"):\n        \"\"\"\n        Assert target exists on device screen\n    \n        :param v: target to be checked\n        :param msg: short description of assertion, it will be recorded in the report\n        :raise AssertionError: if assertion fails\n        :return: coordinates of the target\n        :platforms: Android, Windows, iOS\n        :Example:\n    \n            >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n    \n        \"\"\"\n        try:\n>           pos = loop_find(v, timeout=ST.FIND_TIMEOUT, threshold=ST.THRESHOLD_STRICT or v.threshold)\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\assertions.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png),)\nkwargs = {'threshold': 0.9, 'timeout': 20}\ntry_log_screen = <function try_log_screen at 0x00000208F44EF1F0>, depth = None\nstart = 1742287457.2301557\nm = {'interval': 0.5, 'intervalfunc': None, 'query': Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png), 'threshold': 0.9, ...}\nsnapshot = False\nfndata = {'call_args': {'interval': 0.5, 'intervalfunc': None, 'query': Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\...g), 'threshold': 0.9, ...}, 'end_time': 1742287478.9891448, 'name': 'loop_find', 'start_time': 1742287457.2301557, ...}\ndata = {'end_time': 1742287478.9891448, 'traceback': 'Traceback (most recent call last):\\n  File \"E:\\\\Git\\\\rjjxy\\\\venv\\\\lib\\\\...\\'Picture Template(E:\\\\\\\\Git\\\\\\\\rjjxys\\\\\\\\Picture\\\\\\\\lis_7s\\\\\\\\textbook_explain\\\\\\\\拖动后检查.png) not found in screen\\'\\n'}\n\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        \"\"\"\n        The decorator @logwrap can record the function call information in the airtest log and display it in the report.\n        装饰器@logwrap，能够在airtest的log中记录函数的调用信息，显示在报告中\n    \n        The following parameters can be appended to the function parameter definition for additional effect:\n        在函数参数定义中可以附加以下参数，以获得更多效果：\n    \n        snapshot: snapshot: If True, a snapshot can be attached to the report. 如果为True，可以附加一张截图到报告中\n        depth: the depth order of the current log in the log. 指定log中当前log的深度顺序\n    \n        Examples:\n    \n            @logwrap\n            def func1():\n                pass\n    \n            @logwrap\n            def func1(snapshot=True):\n                pass\n    \n        Args:\n            *args:\n            **kwargs:\n    \n        Returns:\n    \n    \n        \"\"\"\n        from airtest.core.cv import try_log_screen\n        # py3 only: def wrapper(*args, depth=None, **kwargs):\n        depth = kwargs.pop('depth', None)  # For compatibility with py2\n        start = time.time()\n        m = inspect.getcallargs(f, *args, **kwargs)\n        # The snapshot parameter is popped from the function parameter,\n        # so the function cannot use the parameter name snapshot later\n        snapshot = m.pop('snapshot', False)\n        fndata = {'name': f.__name__, 'call_args': m, 'start_time': start}\n        logger.running_stack.append(fndata)\n        try:\n>           res = f(*args, **kwargs)\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nquery = Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png)\ntimeout = 20, threshold = 0.9, interval = 0.5, intervalfunc = None\n\n    @logwrap\n    def loop_find(query, timeout=ST.FIND_TIMEOUT, threshold=None, interval=0.5, intervalfunc=None):\n        \"\"\"\n        Search for image template in the screen until timeout\n    \n        Args:\n            query: image template to be found in screenshot\n            timeout: time interval how long to look for the image template\n            threshold: default is None\n            interval: sleep interval before next attempt to find the image template\n            intervalfunc: function that is executed after unsuccessful attempt to find the image template\n    \n        Raises:\n            TargetNotFoundError: when image template is not found in screenshot\n    \n        Returns:\n            TargetNotFoundError if image template not found, otherwise returns the position where the image template has\n            been found in screenshot\n    \n        \"\"\"\n        G.LOGGING.info(\"Try finding: %s\", query)\n        start_time = time.time()\n        while True:\n            screen = G.DEVICE.snapshot(filename=None, quality=ST.SNAPSHOT_QUALITY)\n    \n            if screen is None:\n                G.LOGGING.warning(\"Screen is None, may be locked\")\n            else:\n                if threshold:\n                    query.threshold = threshold\n                match_pos = query.match_in(screen)\n                if match_pos:\n                    try_log_screen(screen)\n                    return match_pos\n    \n            if intervalfunc is not None:\n                intervalfunc()\n    \n            # 超时则raise，未超时则进行下次循环:\n            if (time.time() - start_time) > timeout:\n                try_log_screen(screen)\n>               raise TargetNotFoundError('Picture %s not found in screen' % query)\nE               airtest.core.error.TargetNotFoundError: 'Picture Template(E:\\\\Git\\\\rjjxys\\\\Picture\\\\lis_7s\\\\textbook_explain\\\\拖动后检查.png) not found in screen'\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\cv.py:80: TargetNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_lis_7s.test_01_textbook_explain.TestTextbookExplain object at 0x00000208F584E8B0>\nlogin = None\n\n    def test_case_01(self, login):\n        self.touch(get_path('学科筛选框'), img_doc='点击学科筛选框')\n        self.touch(get_path('历史'), img_doc='选择历史学科')\n        self.touch(get_path('书本封面'), img_doc='点击书本封面')\n        self.assert_exists(get_path('模块布局'))\n        self.touch(get_path('专题讲座'), img_doc='点击专题讲座')\n        self.assert_exists(get_path('专题讲座布局'))\n        sleep(2)\n        self.touch(get_path('暂停'), img_doc='点击暂停')\n        self.assert_exists(get_path('暂停布局'))\n        self.touch(get_path('播放'), img_doc='点击播放')\n        self.touch(get_path('关闭音量'), img_doc='点击关闭音量')\n        self.touch(get_path('倍速'), img_doc='点击倍速')\n        self.touch(get_path('2.0倍速'), img_doc='点击2.0倍速')\n        self.assert_exists(get_path('检查2.0倍速'))\n        self.touch(get_path('下载'), img_doc='点击下载')\n        self.touch(get_path('确定'), img_doc='点击确定')\n        # 验证下载\n        self.touch(get_path('下载'), img_doc='点击下载')\n        self.assert_exists(get_path('下载中'))\n        self.touch(get_path('恢复音量'), img_doc='点击恢复音量')\n        # 检查拖动\n        self.swipe(get_path('拖动进度'), record_pos=(-0.107, 0.219), vector=[0.0005, -0.0037], img_doc='拖动进度条')\n        sleep(1)\n>       self.assert_exists(get_path('拖动后检查'))\n\nTestCases\\test_lis_7s\\test_01_textbook_explain.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\basepage.py:84: in assert_exists\n    raise e\nCommon\\basepage.py:76: in assert_exists\n    assert_exists(self.template(filepath, threshold=threshold, record_pos=record_pos, resolution=resolution,\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: in wrapper\n    res = f(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nv = Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png), msg = ''\n\n    @logwrap\n    def assert_exists(v, msg=\"\"):\n        \"\"\"\n        Assert target exists on device screen\n    \n        :param v: target to be checked\n        :param msg: short description of assertion, it will be recorded in the report\n        :raise AssertionError: if assertion fails\n        :return: coordinates of the target\n        :platforms: Android, Windows, iOS\n        :Example:\n    \n            >>> assert_exists(Template(r\"tpl1607324047907.png\"), \"assert exists\")\n    \n        \"\"\"\n        try:\n            pos = loop_find(v, timeout=ST.FIND_TIMEOUT, threshold=ST.THRESHOLD_STRICT or v.threshold)\n            return pos\n        except TargetNotFoundError:\n>           raise AssertionError(\"%s does not exist in screen, message: %s\" % (v, msg))\nE           AssertionError: Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png) does not exist in screen, message:\n\n..\\rjjxy\\venv\\lib\\site-packages\\airtest\\core\\assertions.py:30: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c34027329da7a3d2",
      "name" : "adec7af7-7dcc-4f86-bcb4-cedb99c29698-attachment.png",
      "source" : "c34027329da7a3d2.png",
      "type" : "image/png",
      "size" : 1214233
    }, {
      "uid" : "9badc1dd15714c8a",
      "name" : "log",
      "source" : "9badc1dd15714c8a.txt",
      "type" : "text/plain",
      "size" : 48559
    }, {
      "uid" : "1b80126bfd39faaa",
      "name" : "stderr",
      "source" : "1b80126bfd39faaa.txt",
      "type" : "text/plain",
      "size" : 46752
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "open_client::0",
    "time" : {
      "start" : 1742287482065,
      "stop" : 1742287484149,
      "duration" : 2084
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "TestCases.test_lis_7s"
  }, {
    "name" : "suite",
    "value" : "test_01_textbook_explain"
  }, {
    "name" : "subSuite",
    "value" : "TestTextbookExplain"
  }, {
    "name" : "host",
    "value" : "gtx650-ani"
  }, {
    "name" : "thread",
    "value" : "3572-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCases.test_lis_7s.test_01_textbook_explain"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "cc0c22a38fe5a934",
      "status" : "passed",
      "time" : {
        "start" : 1741912146850,
        "stop" : 1741912206635,
        "duration" : 59785
      }
    }, {
      "uid" : "10a4198dce77218a",
      "status" : "failed",
      "statusDetails" : "AssertionError: Template(E:\\Git\\rjjxys\\Picture\\lis_7s\\textbook_explain\\拖动后检查.png) does not exist in screen, message:",
      "time" : {
        "start" : 1741245523186,
        "stop" : 1741245591934,
        "duration" : 68748
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "23b1717713391b07.json",
  "parameterValues" : [ ]
}